@use "sass:string";

// return some props to not repeat them on fontface function.
@mixin src($family, $folder, $weight, $suffixs, $path){
  $src: null;

  @each $suffix in $suffixs {
    $mod: suffixMods($family, $suffix);
    $format: suffixFormats($suffix);
    $src: append($src, url(debugPath($path) + debugFolder($folder) + $family + debugWeight($weight) + "." + $mod) format("#{$format}"), comma);
  }

  // output
  src: $src;
}


@mixin executeOptionalMap($optionalMap) {
  @if isValid($optionalMap) {
    @each $key, $value in $optionalMap {
      $key: string.unquote($key);
      $value: string.unquote($value);

      // output
      #{$key}: #{$value};
    }
  }
}


@mixin executeFontFace($weights, $family, $folder, $suffixs, $path, $optionalMap) {
  @if type-of($weights) == list {
    
    @each $weight in $weights {
      @font-face {
        font-family: $family;
        font-weight: $weight;
        @include src($family, $folder, $weight, $suffixs, $path);
        @include executeOptionalMap($optionalMap);
      }
    }/// each

  } @else if type-of($weights) != list {
    $weight: $weights;

    @font-face {
      font-family: $family;
      font-weight: $weight;
      @include src($family, $folder, $weight, $suffixs, $path);
      @include executeOptionalMap($optionalMap);
    }

  }/// elseif
}